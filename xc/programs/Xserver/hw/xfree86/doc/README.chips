  Information for Chips and Technologies Users
  David Bateman (dbateman@ee.uts.edu.au), Egbert Eich
  (Egbert.Eich@Physik.TH-Darmstadt.DE)
  3rd October 1996

  1.  Introduction

  The Chips and Technologies ct655xx range of chips are primarily
  manufactured for use in laptop computers, where their power
  conservation circuitry is of importance. They can however be found in
  a few "Green" video cards for desktop machines. Prior to the release
  of XFree 3.2, XFree contained only limited support for these chipsets.
  The support that was introduced in XFree3.1.1 was not capable of
  linear addressing or using the programmable clocks in the ct65540 and
  later chips.

  Support for the ct655xx has been almost completely rewritten, with
  many additional features added. These include

     o  Linear Addressing

     o  16/ 24 bits per pixel

     o  Fully programmable clocks are supported

     o  H/W cursor support

     o  BitBLT acceleration of many operations

  2.  Supported Chips


     ct65520
        (Max Ram: 1Mb, Max Dclk: 68MHz@5V)

     ct65530
        This is a very similar chip to the 65520. However it
        additionally has the ability for mixed 5V and 3.3V operation and
        linear addressing of the video memory.  (Max Ram: 1Mb, Max Dclk:
        56MHz@3.3V, 68MHz@5V)

     ct65540
        This is the first version of the of the ct655xx that was capable
        of supporting Hi-Color and True-Color. It also includes a fully
        programmable dot clock and supports all types of flat panels.
        (Max Ram: 1Mb, Max Dclk: 56MHz@3.3V, 68MHz@5V)

     ct65545
        The chip is very similar to the 65540, with the addition of H/W
        cursor, pop-menu acceleration, BitBLT and support of PCI Buses.
        PCI version also allow all the BitBLT and H/W cursor registers
        to be memory mapped 2Mb above the Base Address.  (Max Ram: 1Mb,
        Max Dclk: 56MHz@3.3V,68MHz@5V)

     ct65546
        This chip is specially manufactured for Toshiba, and so
        documentation is not widely available. It is believed that this
        is really just a 65545 with a higher maximum dot-clock of 80MHz.
        (Max Ram: 1Mb?, Max Dclk: 80MHz?)

     ct65548
        This chip is similar to the 65545, but it also includes XRAM
        support and supports the higher dot clocks of the 65546.  (Max
        Ram: 1Mb, Max Dclk: 80MHz)


     ct65550/ct65554
        These chips are a completely new architecture to previous
        ct655xx chips. They include many new features, including
        improved BitBLT support (24bpp color expansion, wider maximum
        pitch, etc), Multimedia unit (video capture, zoom video port,
        etc) and 24bpp uncompressed true color (i.e 32bpp mode). It also
        appears that memory mapped I/O is possible on all bus
        configurations. Support for these chips are new to the server
        and currently quite limited. Testing with these chips has only
        been done on Toshiba 720CDT's. There is only limited support for
        H/W acceleration at this point.  (Max Ram: 4Mb, Max Dclk:
        80MHz@3.3V,110MHz@5V)

  3.  XF86Config Options

  The following options are of particular interest to the Chips and
  Technologies ct655xx driver.  Each of them must be specified in the
  `svga' driver section of the XF86Config file, within the Screen
  subsections of the depths to which they are applicable (you can enable
  options for all depths by specifying them in the Device section).


     Option "noaccel"
        This option will disable the use of any accelerated functions.
        This is likely to help with some problems related to DRAM
        timing, high dot clocks, and bugs in accelerated functions, at
        the cost of performance (which will still be reasonable on
        VLB/PCI).

     Option "no_bitblt" (Chips 65545 and later)
        This option will disable the use of the BitBLT engine which the
        65545 and above have. If you can use the  "noaccel" option to
        correct a problem, then this option might be better to use.  It
        still allows the use of generic speedups.

     Option "no_imageblt" (Chips 65545 and later)
        This option will have the effect of disabling the use of BitBLT
        functions that go from system memory to video memory. It is
        useful for problems related to image writes, and possible
        acceleration problems. In general this will result in a reduced
        performance.

     videoram 1024 (or another value)
        This option will override the detected amount of video memory,
        and pretend the given amount of memory is present on the card.
        Note that many ct655xx chips only allow up to 1Mb of videoram,
        and the amount should be correctly detected.

     Option "nolinear" (Chips 65530 and later)
        By default linear addressing is used on all ct655xx chips.
        However this might be broken in some implementations. It is
        possible to turn the linear addressing off with this option.
        Note that H/W acceleration and 16/24bpp are only supported with
        linear addressing.

     MemBase 0x03b00000 (or a different address)
        This sets the physical memory base address of the linear
        framebuffer. Typically this is probed correctly, but if you
        believe it to be mis-probed, this option might help.

     Option "sw_cursor" (Chips 65545 and later)
        This disables use of the hardware cursor provided by the chip.
        Try this if the cursor seems to have problems.



     Option "STN"
        The server is unable to differentiate between SS STN and TFT
        displays. This forces it to identify the display as a SS STN
        rather than a TFT.

     Option "ext_fram_buf" (DSTN machines only)
        In case the chipset uses a separate framebuffer (one that is not
        part of the vram) this option makes all of the vram available to
        video memory.

     Option "use_modeline"
        The flat panel timings are related to the panel size and not the
        size of the mode specified in XF86Config. For this reason the
        default behaviour of the server is to use the panel timings
        already installed in the chip. The user can force the panel
        timings to be recalculated from the modeline with this option.
        However the panel size will still be probed.

     Option "fix_panel_size"
        For some machines the LCD panel size is incorrectly probed from
        the registers. This option forces the LCD panel size to be
        overridden by the modeline display sizes. This will prevent the
        use of a mode that is a different size than the panel. Before
        using this check that the server reports an incorrect panel
        size. This option can be used in conjunction with the option
        "use_modeline" to program all the panel timings using the
        modeline values.

     Option "no_stretch"
        When the size of the mode used is less than the panel size, the
        default behaviour of the server is to stretch the mode in an
        attempt to fill the screen. A "letterbox" effect with no
        stretching can be achieved using this option.

     Option "lcd_center"
        When the size of the mode used is less than the panel size, the
        default behaviour of the server is to align the left hand edge
        of the display with the left hand edge of the screen. Using this
        option the mode can be centered in the screen. This option is
        reported to have problems with some machines at 16/24bpp, the
        effect of which is that the right-hand edge of the mode will be
        pushed off the screen.

     Option "hw_clocks" (Chips 65540 and later)
        On chips 65540 and later, the default is to use the programmable
        clock for all clocks. It is possible to use the fixed clocks
        supported by the chip instead by using this option. Typically
        this will give you some or all of the clocks 25.175, 28.322,
        31.000 and 36.000MHz. Note that many flat panels will need a dot
        clock that is lower than 25.175MHz to synchronise. The
        programmable clock makes this option obsolete and so it's use
        isn't recommended.

     TextClockFreq 25.175
        It is impossible for the server to read the value of the
        currently used frequency for the text console from the chip with
        the ct6554x series of chips. Therefore the server uses a default
        value of 25.175MHz as the text console clock. For some LCDs, in
        particular DSTN screens, this clock will be wrong. This allows
        the user to select a different clock for the server to use when
        returning to the text console.

     Option "mmio"
        This enables the use of memory-mapped I/O to talk to the BitBLT
        engine. By default memory-mapped I/O is not enabled on the 6554x

        series of chips, and is only usable on 6554x's with PCI buses.
        It also enables additional acceleration using memory-mapped I/O.
        This option has no effect when not using the BitBLT engine (e.g.
        when using "no_bitblt"), or for the 65550 which can only use
        MMIO for access to the BitBLT engine.

     Option "suspend_hack"
        This option sets the centering and stretching to the bios
        default values. This can fix suspend/resume problems on some
        machines. It overrides the options "lcd_center" and
        "no_stretch".

     Option "use_18bit_bus"  (Chips 65540/45/46/48)
        For 24bpp on TFT screens, the server assumes that a 24bit bus is
        being used. This can result in a reddish tint to 24bpp mode.
        This option, selects an 18 bit TFT bus. For other depths this
        option has no effect.

     Chipset "ct65546" (or some other chip)
        It is possible that the chip could be misidentified, particular
        due to interactions with other drivers in the server. It is
        possible to force the server to identify a particular chip with
        this option.  Some later releases of the ct65545, in particular
        the ct65545A1 and ct65545B1, are believed to have limitations
        very similar to those of the 65546. The server is currently
        configured to use the 65545 bandwidth, etc for these chips. So
        the user might wish to force the server to identify their chip
        as a ct65546 and so have a larger maximum bandwidth. Note that
        this forces the server to exceed the documented limitations of
        the chip, so take care.

     Option "sync_on_green" (Chips 65550/54)
        Composite sync on green. Possibly useful if you wish to use an
        old workstation monitor. The 65550/54 internal RAMDAC's support
        this mode of operation, but whether a particular machine does
        depends on the manufacturer.

  4.  Modelines

  When constructing a modeline for use with the Chips and Technologies
  driver you'll needed to considered several points


      * 16/24 Bits Per Pixel
        Chips later than the ct65540 are capable of supporting Hi-Color
        and True-Color modes. These are implemented in the current
        server. The clocks in the 6554x series of chips are internally
        divided by 2 for 16bpp and 3 for 24bpp, allowing one modeline to
        be used at all depths.  The effect of this is that the maximum
        dot clock visible to the user is a half or a third of the value
        at 8bpp. The 6555x series of chips doesn't need to use
        additional clock cycles to display higher depths, and so the
        same modeline can be used at all depths, without needing to
        divide the clocks.  Also 16/24 bpp modes will need 2 or 3 times
        respectively more video ram.

      * Frame Acceleration
        Many DSTN screens use frame acceleration to improve the
        performance of the screen. This can be done by using an external
        frame buffer, or incorporating the framebuffer at the top of
        video ram depending on the particular implementation. The
        Xserver assumes that the framebuffer, if used, will be at the
        top of video ram.  The amount of ram required for the
        framebuffer will vary depending on the size of the screen, and
        will reduce the amount of video ram available to the modes.

        Typical values for the size of the framebuffer will be 57600
        bytes (640x480 panel), 90000 bytes (800x600 panel) and 147456
        bytes (1024x768 panel). For systems with external framebuffers
        the option "ext_fram_buf" can be used to make all the vram
        available to video memory.

      * H/W Acceleration
        The H/W cursor, and fill operations currently allocate 2kB of
        the video ram for there own use. If this is not available these
        functions will automatically be disabled.

      * VESA like modes
        We recommend that you try and pick a mode that is similar to a
        standard VESA mode. If you don't a suspend/resume or LCD/CRT
        switch might mess up the screen. This is a problem with the
        video BIOS not knowing about all the funny modes that might be
        selected.

      * Dot Clock
        For LCD screens, the lowest clock that gives acceptable contrast
        and flicker is usually the best one. This also gives more memory
        bandwidth for use in the drawing operations. Some users prefer
        to use clocks that are defined by their BIOS. This has the
        advantage that the BIOS will probably restore the clock they
        specified after a suspend/resume or LCD/CRT switch.

  The ct655xx driver is capable of driving both a CRT and a flat panel
  display. Generally most modelines that work with CRT's will also work
  with the ct655xx driver. If the "use_modeline" or "fix_panel_size"
  options are not specified, only the clock, polarities, vertical and
  horizontal sizes are used in the mode calculations on an LCD. Hence a
  mode like



       Modeline "640x480@8bpp"   21.000  640    0    0    0   480    0    0    0




  will often be sufficient for a laptop screen. Just program the zeroed
  values above to those you would use for a CRT. It should also be noted
  that flat panels often prefer dot clocks that are much slower than
  CRT's. Below you'll find listed a set of modelines that are in use of
  a variety of machines. These can be used as starting points for new
  modelines.




















  Modeline "640x480@8bpp"   21.000  640  688  704  776   480  480  481  486
  Tested on a Sharp PC3020, (640x480 DSTN, 65545A1, 512kByte)

  Modeline "640x480@8bpp"   16.000  640  688  704  776   480  480  481  486
  Modeline "640x480@16bpp"  16.000  640  688  704  776   480  480  481  486
  Modeline "640x480@24bpp"  16.330  640  664  760  800   480  490  502  525
  Tested on a Toshiba Satellite T2135CS (640x480 DSTN, 65545??, 1MByte)

  Modeline "640x480@8bpp"   25.175  640  664  760  800   480  491  493  525
  ModeLine "640x480@8bpp"   28.322  640  680  720  864   480  488  491  521
  Modeline "640x480@16bpp"  38.000  640  648  668  808   480  490  502  525
  Modeline "640x480@24bpp"  23.000  640  648  756  809   480  490  502  525
  Tested on a Toshiba 400CDT, (640x480 TFT, 65546 1Mbyte)

  Modeline "800x600@8bpp"   40.000  800  840  968 1056   600  601  605  628
  Modeline "800x600@16bpp"  36.000  800  840  968 1056   600  601  605  628
  Tested on a Sager Narval86 (800x600 DSTN, 65548, 1Mbyte)

  Modeline "1024x768@8bpp"  65.000 1024 1032 1176 1344   768  771  777  806
  Modeline "1024x768@16bpp" 65.000 1024 1032 1176 1344   768  771  777  806
  Tested on a Toshiba 720CDT, (1024x768 TFT, 65550, 2Mbyte)




  Note that there are some machines that are known to need the panel
  timings reprogrammed for use with XFree using the "use_modeline"
  option.  One such machine is the "Prostar 8200" with a 640x480 TFT.
  For this machine a modeline that is known to work is



       Modeline "640x480@8bpp"   25.175  640  672  728  816   480  489  501  526
       Modeline "640x480@16bpp"  25.175  640  672  728  816   480  489  501  526
       Tested on a Prostar 8200, (640x480, 65548, 1Mbyte)




  Also there are some machines that are known to report the LCD panel
  size incorrectly. The correct panel size can be forced into registers
  from the modeline values using the "fix_panel_size" option. Two
  machines that are know to need this option are the HP OmniBook 5000CTS
  and the NEC Versa 4080 800x600 TFT machines. A modeline that is known
  to work with the OmniBook in conjunction with the "use_modeline" and
  "fix_panel_size" options is



       Modeline "800x600@8bpp"   28.322  800  808  848  936   600  600  604  628
       Tested on a HP OmniBook 5000CTS (800x600 TFT, 65548, 1Mbyte)




  The NEC Versa 4080 just needs the "fix_panel_size" option.

  5.  Troubleshooting


      The Cursor Appears as a white box, after switching modes
        There is a known bug in the H/W cursor, that sometimes causes
        the cursor to be redrawn as a white box, when the mode is
        changed.  This can be fixed by moving the cursor to a different
        region, switching to the console and back again, or if it is too

        annoying the H/W cursor can be disabled with the "sw_cursor"
        option.

      The lower part of the screen is corrupted
        Many DSTN screens use the top of video ram to implement a frame
        accelerator. This reduces the amount of video ram available to
        the modes. The server doesn't prevent the user from specifying a
        mode that will use this memory, it prints a warning on the
        console.  The effect of this problem will be that the lower part
        of the screen will reside in the same memory as the frame
        accelerator and will therefore be corrupt. Try reducing the
        amount of memory consumed by the mode.

      There is a video signal, but the screen doesn't sync.
        You are using a mode that your screen cannot handle. If it is a
        non-standard mode, maybe you need to tweak the timings a bit. If
        it is a standard mode and frequency that your screen should be
        able to handle, try to find different timings for a similar mode
        and frequency combination. For LCD modes, it is possible that
        your LCD panel requires different panel timings at the text
        console than with a graphics mode. In this case you will need
        the "use_modeline" and perhaps also the "fix_panel_size" options
        to reprogram the LCD panel timings to sensible values.

      `Wavy' screen.
        Horizontal waving or jittering of the whole screen, continuously
        (independent from drawing operations).  You are probably using a
        dot clock that is too high (or too low); it is also possible
        that there is interference with a close MCLK. Try a lower dot
        clock.  You can also try to tweak the mode timings; try
        increasing the second horizontal value somewhat.

      Crash or hang after start-up (probably with a black screen).
        Try the "noaccel" or "no_bitblt" options. Check that the BIOS
        settings are OK; in particular, disable caching of
        0xa0000-0xaffff. Disabling hidden DRAM refresh may also help.

      Crash, hang, or trash on the screen after a graphics operation.
        This may be related to a bug in one of the accelerated
        functions, or a problem with the BitBLT engine. Try the
        "noaccel" or "no_bitblt" options. Also check the BIOS settings.
        It is also possible that with a high dot clock and depth on a
        large screen there is very little bandwidth left for using the
        BitBLT engine. Try reducing the clock.

      Chipset is not detected.
        Try forcing the chipset to a type that is most similar to what
        you have.

      Textmode is not properly restored
        This has been reported on some configurations. Many laptops use
        the programmable clock of the 6554x chips at the console.  It is
        not always possible to find out the setting that is used for
        this clock if BIOS has written the MClk after the VClk. Hence
        the server assumes a 25.175MHz clock at the console. This is
        correct for most modes, but can cause some problems. Usually
        this is fixed by switching between the LCD and CRT.
        Alternatively the user can use the "TextClockFreq" option
        described above to select a different clock for the text
        console.

      I can't display 640x480 on my 800x600 LCD
        The problem here is that the flat panel needs timings that are
        related to the panel size, and not the mode size. There is no
        facility in the current Xservers to specify these values, and so

        the server attempts to read the panel size from the chip. If the
        user has used the "use_modeline" or "fix_panel_size" options the
        panel timings are derived from the mode, which can be different
        than the panel size. Try deleting theses options from XF86Config
        or using an LCD/CRT switch.

      After a suspend/resume my screen is messed up
        During a suspend/resume, the BIOS controls what is read and
        written back to the registers. If the screen is using a mode
        that BIOS doesn't know about, then there is no guarantee that it
        will be resumed correctly. For this reason a mode that is as
        close to VESA like as possible should be selected. It is also
        possible that the VGA palette can be affected by a
        suspend/resume.  Using an 8bpp, the colour will then be
        displayed incorrectly. This shouldn't affect higher depths, and
        is fixable with a switch to the virtual console and back.

      The right hand edge of the mode isn't visible on the LCD
        This is usually due to a problem with the "lcd-center" option.
        If this option is removed form XF86Config, then the problem
        might go away. Alternatively the manufacturer could have
        incorrectly programmed the panel size in the EGA console mode.
        The "fix_panel_size" can be used to force the modeline values
        into the panel size registers. Two machines that are known to
        have this problem are the "HP OmniBook 5000" and the "NEC  Versa
        4080".

      My TFT screen has a reddish tint in 24bpp mode
        The server assumes that the TFT bus width is 24bits. If this is
        not true then the screen will appear to have a reddish tint.
        This can be fixed by using the "use_18bit_bus" option. Note that
        the reverse is also true. If the "use_18bit_bus" is used at the
        TFT bus width is 24bpp, the the screen will appear reddish.
        Note that this option only has an effect on TFT screens.

      I can't start X-windows with 16 or 24bpp
        Firstly, is your machine capable of 16/24bpp with the mode
        specified. Many LCD displays are incapable of using a 24bpp
        mode. Also you need at least a 65540 to use 16/24bpp, and the
        amount of memory used by the mode will be doubled/tripled. The
        correct options to start the server with these modes are

                  startx -- -bpp 16               5-6-5 RGB ('64K color', XGA)
                  startx -- -bpp 16 -weight 555   5-5-5 RGB ('Hicolor')
                  startx -- -bpp 24               8-8-8 RGB truecolor


     Note that there is currently no "-bpp 32" mode in the Xserver,
     although the 65550 is capable of this.

  For other screen drawing related problems, try the "noaccel" or
  "no_bitblt" options. A useful trick for all laptop computers is to
  switch between LCD/CRT (usually with something like Fn-F5), if the
  screen is having problems.

  If you are having driver-related problems that are not addressed by
  this document, or if you have found bugs in accelerated functions, you
  can try contacting the XFree86 team (the current driver maintainer can
  be reached at dbateman@ee.uts.edu.au or Egbert.Eich@Physik.TH-
  Darmstadt.DE), or post in the Usenet newsgroup
  "comp.windows.x.i386unix".





  6.  Disclaimer

  Xfree, allows the user to do damage to their hardware with software.
  Although the authors of this software have tried to prevent this, they
  disclaim all responsibility for any damage caused by the software. Use
  caution, if you think the Xserver is frying your screen, TURN THE
  COMPUTER OFF!!

  7.  Acknowledgement

  The authors of this software wish to acknowledge the support supplied
  by Chips and Technologies during the development of this software.

  8.  Authors

  Major Contributors (In no particular order)

     o  Nozomi Ytow

     o  Egbert Eich

     o  David Bateman

     o  Xavier Ducoin

  Contributors (In no particular order)

     o  Ken Raeburn

     o  Shigehiro Nomura

     o  Marc de Courville

     o  Adam Sulmicki

     o  Jens Maurer

  We also thank the many people on the net who have contributed by
  reporting bugs and extensively testing this server before its
  inclusion in XFree 3.2


  Generated from XFree86: xc/programs/Xserver/hw/xfree86/doc/sgml/chips.sgml,v 3.9 1996/10/24 12:30:26 dawes Exp $
























$XFree86: xc/programs/Xserver/hw/xfree86/doc/README.chips,v 3.9 1996/10/24 12:42:28 dawes Exp $
